 
options {
  JDK_VERSION = "1.5";
  STATIC = false;
  OUTPUT_DIRECTORY = ".";
  IGNORE_CASE=true ;
}

PARSER_BEGIN(Psql)
/**
 * The parser generated by JavaCC
 */
package it.unibo.lmc.pjdbc.parser;

import alice.tuprolog.Prolog;
import it.unibo.lmc.pjdbc.core.ParsedRequest;
import it.unibo.lmc.pjdbc.core.PrologRequestType;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Psql {

	private String defaultSchema;
	
}
PARSER_END(Psql)

SKIP :
{
 	" "
	| "\r"
	| "\t"
	| "\n"
}
TOKEN: /* OPERATORS */
{
	<K_AS: "AS">
	|   <K_BY:"BY">
	|   <K_DO:"DO">
	|   <K_IS:"IS">
	|   <K_IN:"IN">
	|   <K_OR:"OR">
	|   <K_ON:"ON">
	|   <K_ALL: "ALL">
	|   <K_AND: "AND">
	|   <K_ANY: "ANY">
	|   <K_KEY: "KEY">
	|   <K_NOT:"NOT">
	|   <K_SET:"SET">
	|   <K_ASC:"ASC">
	|   <K_TOP:"TOP">
	|   <K_END:"END">
	|   <K_DESC:"DESC">
	|   <K_INTO:"INTO">
	|   <K_NULL:"NULL">
	|   <K_LIKE:"LIKE">
	|   <K_DROP:"DROP">
	|   <K_JOIN:"JOIN">
	|   <K_LEFT:"LEFT">
	|   <K_FROM:"FROM">
	|   <K_OPEN:"OPEN">
	|   <K_CASE:"CASE">
	|   <K_WHEN:"WHEN">
	|   <K_THEN:"THEN">
	|   <K_ELSE:"ELSE">
	|   <K_SOME: "SOME">
	|   <K_TABLE:"TABLE">
	|   <K_WHERE:"WHERE">
	|   <K_USING:"USING">
	|   <K_UNION:"UNION">
	|   <K_GROUP:"GROUP">
	|   <K_BEGIN:"BEGIN">
	|   <K_INDEX: "INDEX">
	|   <K_INNER:"INNER">
	|   <K_LIMIT:"LIMIT">
	|   <K_OUTER:"OUTER">
	|   <K_ORDER:"ORDER">
	|   <K_DELETE:"DELETE">
	|   <K_CREATE:"CREATE">
	|   <K_SELECT:"SELECT">
	|   <K_OFFSET:"OFFSET">
	|   <K_EXISTS:"EXISTS">
	|   <K_HAVING:"HAVING">
	|   <K_INSERT:"INSERT">
	|   <K_UPDATE:"UPDATE">
	|   <K_VALUES:"VALUES">
	|   <K_ESCAPE:"ESCAPE">
	|   <K_PRIMARY:"PRIMARY">
	|   <K_NATURAL:"NATURAL">
	|   <K_REPLACE:"REPLACE">
	|   <K_BETWEEN:"BETWEEN">
	|   <K_TRUNCATE:"TRUNCATE">
	|   <K_DISTINCT:"DISTINCT">
	|   <K_INTERSECT:"INTERSECT">
}


TOKEN :
{
	< S_IDENTIFIER: ( <LETTER>|<SPECIAL_CHARS> )+ ( <DIGIT> | <LETTER> |<SPECIAL_CHARS>)* >
	| < #LETTER: ["a"-"z","A"-"Z"]>
	| < #SPECIAL_CHARS: "$" | "_">
	| < S_BIND: ":" <S_IDENTIFIER> ("." <S_IDENTIFIER>)? >
	| < S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
	| < S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" >
	| < S_NUMBER: <FLOAT> | <FLOAT> ( ["e","E"] ([ "-","+"])? <FLOAT> )? >
	| < #FLOAT: <S_INTEGER> | <S_INTEGER> ( "." <S_INTEGER> )? | "." <S_INTEGER> >
	| < S_INTEGER: ( <DIGIT> )+ >
	| < #DIGIT: ["0"-"9"]>
}


ParsedRequest parseIt(String schema) : 
{
	this.defaultSchema = schema;
}
{
	(
	    Select()			// SELECT column_one, column_two FROM table_name WHERE (expression) <LIMIT,ORDER BY> 
	    |
	    Update()			// UPDATE table_name SET (campo=valore,..) WHERE (expression) <LIMIT>;
	    |
	    Insert()			// INSERT INTO table_name (campi) VALUES (valori dei campi)
	    |
	    Delete()			// DELETE FROM table_name WHERE (expression) 
	    |
	    Drop()				// DROP table_name1, table_name2,....
	    //|
	    //Truncate()			// TRUNC table_name
	    //|
	    //CreateTable()		// CREATE TABLE ....
    )
    ";"
    { return request; }
}


Update Update():
{ 
	Update update = new Update(this.defaultSchema);
	Table t;
	TableField column;
	Expression value;
	Expression where;
}
{
    <K_UPDATE> t = Table() { update.setTable(t); }
    <K_SET> column=Column() "=" value=SimpleExpression() { update.update(column.getColumnName(),value.toString()); }
	(
		"," column=Column() "=" value=SimpleExpression()  { update.update(column.getColumnName(),value.toString()); } 
	)*

   [ where=WhereClause() { update.setWhere(where); } ]
   { 
		return update;
   }
}


Insert Insert():
{ 
	Insert insert = new Insert(this.defaultSchema);
	Table t;
	TableField column;
	ArrayList<TableField> columns = new ArrayList<TableField>();
	ArrayList<Expression> values = new ArrayList<Expression>();
}
{
    <K_INSERT> [<K_INTO>] t=Table() { insert.setTable(t); }
    
    
     [LOOKAHEAD(2) "(" column=Column() { columns.add(column); } ("," column=Column() { columns.add(column); } )* ")"  ]
	
	( 
		<K_VALUES>  "(" exp=SimpleExpression() { values.add(exp); } 
					("," exp=SimpleExpression()  { values.add(exp); } )* 
					")" 
					{
				
						for (int i = 0; i < columns.size(); i++) {
							insert.insert(columns.get(i).getColumnName(),values.get(i).toString());
						}
					
					}
		| 
		
		[LOOKAHEAD(2) "(" ]
		(
			{
			//	SubSelect itemsList;
			}
			//itemsList=SubSelect()
			{
				// DA FARE!!
			}
		)
		[ ")" ]
	)
    
    {
    	return insert; 
    }
}


Delete Delete():
{ 
	Delete delete = new Delete(this.defaultSchema);
	Table t = null;
	Expression where = null;
}
{
    <K_DELETE> [<K_FROM>] table=Table() { delete.setTable(t); }
    [where=WhereClause() { delete.setWhere(where); } ]
    { return delete; }
}

Drop Drop():
{
	Drop drop = new Drop();
	Table t = null;
}
{
	<K_DROP> <K_TABLE> t=Table() { drop.addTable(t); }
	("," t=Table() { drop.addTable(t); } )*
	
	{
		return drop;
	}
}

TableField Column():
{
	String name1 = null;
	String name2 = null;
	String name3 = null;
	
	TableField field;
	boolean distinct = false;
}
{
    // [schema.][tabella.]colonna
    [ <K_DISTINCT> {distinct = true;} ] name1=RelObjectName() [ "." name2=RelObjectName() ["." name3=RelObjectName()]]
    {
    
    	if (name3 != null) {
    		colName = name3;
    		field = new TableField(name3);
    		field.setTableName(name2);
    		field.setSchema(name1);
    	} else if (name2 != null) {
    		field = new TableField(name2);
    		field.setTableName(name1);
    	} else {
    		field = new TableField(name1);
    	}
    	
    	field.setDistinct(distinct);
    	return field;
   	}
}

String RelObjectName()  :
{	Token tk = null; }
{
	(
	tk=<S_IDENTIFIER>
	|
	tk=<S_QUOTED_IDENTIFIER>
	| 
	tk=<S_CHAR_LITERAL>
	)
	
    { return tk.image; }
}

Table TableWithAlias():
{
	Table t = null;
	String alias = null;
}
{
	t=Table() [alias=Alias() { t.setAlias(alias); }]
	{ return table; }
}


Table Table():
{ 
	Table table = null;
	String schema = null;
	String name = null;
}
{
	(LOOKAHEAD(3) 
		schema=RelObjectName() "." name2=RelObjectName()  { table = new Table(schema, name); }
		|
		name=RelObjectName() { table = new Table(this.defaultSchema,name); } 
	)	
	{		
		return table;
	}
	
}


Select Select():
{ 
	Select select = new Select(this.defaultSchema);
	TableField field;
	
	List fromList;
	List group;
	List order;
	
	Expression where;
	
}
{
	<K_SELECT> field=Column() { select.addField(field); } 
		[ "," field=Column() { select.addField(field); } ] 
	fromList=FromItemsList() { select.from(fromList); } 
		[ where=WhereClause() { select.where(where); } ] 
		[ group=GroupByColumnReferences() { select.groupBy(group); } ] 
		[ order=OrderByElements() { select.orderBy(order); } ]
		[ limit=Limit() { select.limit(limit); } ]
}

String Alias():
{ String retval = null; }
{
	[<K_AS>] retval=RelObjectName()
   { return retval; }
}

List FromItemsList():
{
	ArrayList fromItemsList = new ArrayList();
	Table t = null;
}
{
    <K_FROM> t=FromItem() { fromItemsList.add(t); } 
    ( "," fromItem=FromItem() { fromItemsList.add(t); } )* 

    { 	return fromItemsList;  }
}

Table FromItem():
{
	Table t = null;
}
{
	t=TableWithAlias()
	{
		return t;
	}
}

Expression WhereClause():
{
	Expression retval = null;
}
{
    <K_WHERE> retval=Expression()
    { return retval; }
}


List GroupByColumnReferences():
{
	ColumnReference columnReference = null;
	List columnReferences = new ArrayList();
}
{
    <K_GROUP> <K_BY> columnReference=ColumnReference() {columnReferences.add(columnReference); }
    ("," columnReference=ColumnReference()  {columnReferences.add(columnReference); } )*
	{
		return columnReferences;
	}
}


List OrderByElements():
{ 
	List orderByList = new ArrayList();
	OrderByElement orderByElement = null;
}
{
    <K_ORDER> <K_BY> orderByElement=OrderByElement() { orderByList.add(orderByElement); }
        ("," orderByElement=OrderByElement() { orderByList.add(orderByElement); } )*
    {
    	return orderByList; 	
    }
}

OrderByElement OrderByElement():
{
	OrderByElement orderByElement = new OrderByElement(); 
	List retval = new ArrayList();
	ColumnReference columnReference = null;
}
{
	columnReference = ColumnReference()
    [<K_ASC> | (<K_DESC> { orderByElement.setAsc(false); } )  ]
	{
    	orderByElement.setColumnReference(columnReference);
		return orderByElement;
	}
}

Limit Limit():
{
	Limit limit = new Limit(); 
	Token token = null;
}
{
	(
			LOOKAHEAD(3)
				// mysql-> LIMIT offset,row_count
				<K_LIMIT> 
					 (
					 	token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } 
					 	|
					 	"?" { limit.setOffsetJdbcParameter(true);} 
					 ) 
					 ","  
				
				(
				token=<S_INTEGER> { limit.setRowCount(Long.parseLong(token.image)); } | "?" { limit.setRowCountJdbcParameter(true);}
				)
			| 
			// postgresql-> OFFSET offset
			 <K_OFFSET>
				 (token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } | "?" { limit.setOffsetJdbcParameter(true);} )  
			|
				// mysql-postgresql-> LIMIT (row_count | ALL) [OFFSET offset]
				<K_LIMIT> 
				 (
				 	token=<S_INTEGER> { limit.setRowCount(Long.parseLong(token.image)); } 
				 	|
				 	"?" { limit.setRowCountJdbcParameter(true);}  
				 	|
				 	<K_ALL> { limit.setLimitAll(true);}  
				 )
				 
				 [<K_OFFSET>
					 (token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } | "?" { limit.setOffsetJdbcParameter(true);} )  ]

		)
	{
		return limit;
	}
}



ColumnReference ColumnReference():
{
	ColumnReference retval = null;
}
{
	(retval=Column() | retval=ColumnIndex())
	{
		return retval;
	}
}

ColumnIndex ColumnIndex(): 
{
	ColumnIndex retval = new ColumnIndex();
	Token index = null;
} 
{
	index=<S_INTEGER>
	{
		retval.setIndex(Integer.parseInt(index.image));
		return retval;
	}
}
	

Expression Expression():
{ 
	Expression retval = null;
}
{
	(
	LOOKAHEAD(OrExpression())
		retval=OrExpression() 
		|
		"(" retval=Expression() ")" {retval = new Parenthesis(retval); }
		
	)
	
    { return retval; }
}

Expression OrExpression()  :
{
	Expression left, right, result;
}
{
	left=AndExpression() { result = left; }
	(
		LOOKAHEAD(<K_OR>) 
			<K_OR>
			right=AndExpression()
			{
				result = new OrExpression(left, right);
				left = result;
	   		}
	 )*
	 {
	 	return result;
	 }
	   
}



Expression AndExpression() :
{
	Expression left, right, result;
	boolean not = false;
}
{

	(
	LOOKAHEAD(Condition())
	    left=Condition()
	    |
	    [ <K_NOT> { not = true; } ]
	    "(" left=OrExpression() ")" {left = new Parenthesis(left); if (not) ((Parenthesis)left).setNot(); }
	)
	{ result = left; }
	
	(
		LOOKAHEAD(<K_AND>)
 		<K_AND>
		(
		LOOKAHEAD(Condition())
		    right=Condition()
		    |
		    "(" right=OrExpression() ")" {right = new Parenthesis(right); }
		)
		{
			result = new AndExpression(left, right);
			left = result;
		}
	)*
	{
		return result;
	}
}

Expression Condition():
{
	Expression result;
}
{
	(LOOKAHEAD(SQLCondition()) result=SQLCondition()
	| result=RegularCondition())
	
	{ return result; }
}

Expression RegularCondition():
{
	Expression result = null;
	Expression leftExpression;
	Expression rightExpression;
	boolean not = false;
}
{

	[ <K_NOT> { not = true; } ] 
	leftExpression=ComparisonItem() { result = leftExpression; }

	(
	">" { result = new GreaterThan(); }
	| "<" { result = new MinorThan(); }
	| "=" { result = new EqualsTo(); }
	| ">=" { result = new GreaterThanEquals(); }
	| "<=" { result = new MinorThanEquals(); }
	| ("<>" | "!=") { result = new NotEqualsTo(); }
	)
	rightExpression=ComparisonItem()
	{
		BinaryExpression regCond = (BinaryExpression) result;
		regCond.setLeftExpression(leftExpression);
		regCond.setRightExpression(rightExpression);
		if (not)
			regCond.setNot();
	}		
	
	{ return result; }
}


Expression SQLCondition():
{
	Expression result;
}
{
	(
	LOOKAHEAD(InExpression()) result=InExpression()
	| LOOKAHEAD(Between()) result=Between()
	| LOOKAHEAD(IsNullExpression()) result=IsNullExpression()
	| LOOKAHEAD(ExistsExpression()) result=ExistsExpression()
	|  result=LikeExpression()
	)
	{ return result; }
}

Expression InExpression() :
{
	InExpression result = new InExpression();
	ItemsList itemsList = null;
	Expression leftExpression = null;
}
{
	leftExpression=SimpleExpression()
    [<K_NOT> { result.setNot(true); } ] 
    <K_IN> 
    "(" itemsList=SimpleExpressionList() ")"
	{ 
		result.setLeftExpression(leftExpression);
		result.setItemsList(itemsList);
		return result; 
	}
}

Expression Between() :
{
	Between result = new Between();
	Expression leftExpression = null;
	Expression betweenExpressionStart = null;
	Expression betweenExpressionEnd = null;
}
{
	leftExpression=SimpleExpression()
	    [<K_NOT> { result.setNot(true); }] 
	    <K_BETWEEN> betweenExpressionStart=SimpleExpression() <K_AND> betweenExpressionEnd=SimpleExpression()
	
	{ 
		result.setLeftExpression(leftExpression);
		result.setBetweenExpressionStart(betweenExpressionStart);
		result.setBetweenExpressionEnd(betweenExpressionEnd);
		return result; 
	}
}

Expression LikeExpression() :
{
	LikeExpression result = new LikeExpression();
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
	leftExpression=SimpleExpression()
    [<K_NOT> { result.setNot(true); } ] <K_LIKE> rightExpression=SimpleExpression()
    [<K_ESCAPE> token=<S_CHAR_LITERAL> { result.setEscape((new StringValue(token.image)).getValue()); }]
	{ 
		result.setLeftExpression(leftExpression);
		result.setRightExpression(rightExpression);
		return result; 
	}
}

Expression IsNullExpression():
{
	IsNullExpression result = new IsNullExpression();
	Expression leftExpression = null;
}
{
	leftExpression=SimpleExpression()
    <K_IS> [<K_NOT> { result.setNot(true); } ] <K_NULL>

	{ 
		result.setLeftExpression(leftExpression);
		return result; 
	}
}


Expression ExistsExpression():
{
	ExistsExpression result = new ExistsExpression();
	Expression rightExpression = null;
}
{
    [<K_NOT> { result.setNot(true); } ] <K_EXISTS> rightExpression=SimpleExpression()
	{ 
		result.setRightExpression(rightExpression);
		return result; 
	}
}


ExpressionList SQLExpressionList():
{
	ExpressionList retval = new ExpressionList();
	List expressions = new ArrayList();
	Expression expr = null;
}
{
    expr=Expression() { expressions.add(expr); } ("," expr=Expression() { expressions.add(expr); })*
	{
		retval.setExpressions(expressions);
		return retval;
	}
}

ExpressionList SimpleExpressionList():
{
	ExpressionList retval = new ExpressionList();
	List expressions = new ArrayList();
	Expression expr = null;
}
{
    expr=SimpleExpression() { expressions.add(expr); } ("," expr=SimpleExpression() { expressions.add(expr); })*
	{
		retval.setExpressions(expressions);
		return retval;
	}
}

Expression ComparisonItem() :
{ 
	Expression retval = null; 
}
{
  (
    retval=SimpleExpression()
  )

   {
      return retval;
   }
}

Expression SimpleExpression():
{ 
	Expression retval = null; 
}
{
  (
		LOOKAHEAD(AdditiveExpression())
		retval=AdditiveExpression() 
		|
		"(" retval=AdditiveExpression() ")" {retval = new Parenthesis(retval); }
  
  )

   {
      return retval;
   }
}

Expression AdditiveExpression():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
    leftExpression=MultiplicativeExpression()  { result = leftExpression; }
    (
    	LOOKAHEAD(2) ("+" { result = new Addition(); }
    								| "-" { result = new Subtraction(); } ) 
    								
    						rightExpression=MultiplicativeExpression()
    						
		{
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result; 
		}								
    )*
    
    { return result; }
}


Expression MultiplicativeExpression():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
	(
	LOOKAHEAD(PrimaryExpression())
	    leftExpression=PrimaryExpression()
	    |
	    "(" leftExpression=AdditiveExpression() ")" {leftExpression = new Parenthesis(leftExpression); }
	)
      { result = leftExpression; }
    (
    	LOOKAHEAD(2) ("*" { result = new Multiplication(); }
    								| "/" { result = new Division(); } ) 
    								
				(
				LOOKAHEAD(PrimaryExpression())
    						rightExpression=PrimaryExpression()
						    |
						    "(" rightExpression=AdditiveExpression() ")" {rightExpression = new Parenthesis(rightExpression); }
				)
    						
		{
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result; 
		}								
    )*
    { return result; }
}


Expression PrimaryExpression():
{ 
	Expression retval = null;
	Token token = null;
	boolean isInverse = false;
	String tmp = "";
}
{

(

	<K_NULL> { retval = new NullValue(); }

	| "?" { retval = new JdbcParameter(); }
	
	| LOOKAHEAD([ "+" | "-"] Function()) [ "+" | "-" { isInverse = true; }] retval=Function() 
	
	| LOOKAHEAD([	"+" | "-"] <S_NUMBER>) 	[	"+" | "-" { tmp = "-"; }]  token=<S_NUMBER> { retval = new DoubleValue(tmp+token.image); }
	
	| LOOKAHEAD([	"+" | "-"] <S_INTEGER>)  	[	"+" | "-" { tmp = "-"; }]  token=<S_INTEGER> { retval = new LongValue(tmp+token.image); }

	| LOOKAHEAD(2) 	[ "+" | "-" { isInverse = true; }] retval=Column() 

	| LOOKAHEAD(2) [ "+" | "-" { isInverse = true; }]  "(" retval=PrimaryExpression() ")" {retval = new Parenthesis(retval); }

	| token=<S_CHAR_LITERAL> { retval = new StringValue(token.image); }
	
	| 	"{d" token=<S_CHAR_LITERAL> "}" { retval = new DateValue(token.image); }

	| 	"{t" token=<S_CHAR_LITERAL> "}" { retval = new TimeValue(token.image); }

	| 	"{ts" token=<S_CHAR_LITERAL> "}" { retval = new TimestampValue(token.image); }
	
	
)

    { 
		if (isInverse) { 
			retval = new InverseExpression(retval); 
		}
    	return retval; 
    }
}


Function Function():
{
	Function retval = new Function();
	String funcName = null;
	String tmp = null;
	ExpressionList expressionList = null;  
}
{
	["{fn" { retval.setEscaped(true); } ]
	(
	    funcName=RelObjectName()
    	| 
    	// workaround for replace(string) function (name clash with mysql REPLACE expression)
	    <K_REPLACE> { funcName = "REPLACE"; }
    ) [ "." tmp=RelObjectName() { funcName+= "." + tmp; } ["." tmp=RelObjectName() { funcName+= "." + tmp; }]]
    "(" [ /*[<K_DISTINCT> | <K_ALL>]*/ (expressionList=SimpleExpressionList() | "*" { retval.setAllColumns(true); }) ] ")"
    
    ["}"]
    { 
	    retval.setParameters(expressionList);
	    retval.setName(funcName);
    	return retval; 
    }
}

String AList():
{
	StringBuffer retval = new StringBuffer("(");
	Token tk = null;
}
{
	 "(" 
	 
	 ( (tk=<S_INTEGER> | tk=<S_NUMBER> | tk=<S_CHAR_LITERAL> | tk=<S_IDENTIFIER>) { retval.append(tk.image); } ["," {retval.append(",");}] )*    
	 
	")"
	{
		retval.append(")");
		return retval.toString();
	}
}



